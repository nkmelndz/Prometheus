name: Delivery and Metrics Validation

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Entorno de despliegue'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  PROMETHEUS_URL: "http://localhost:9090"
  METRIC_QUERY: "aspnetcore_healthcheck_status{name=\"sqlserver\"}" # Métrica alternativa más confiable

jobs:
  deploy-and-monitor:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker
        uses: docker/setup-buildx-action@v3

      - name: Start containers
        run: |
          docker compose up -d --force-recreate
          echo "Esperando a que los servicios estén listos..."
          timeout 120s bash -c 'while ! curl -s http://localhost:9090/-/ready; do sleep 5; done'
          echo "Verificando targets en Prometheus..."
          curl -s http://localhost:9090/api/v1/targets | jq .

      - name: Verify metrics
        id: check-metrics
        run: |
          # Lista todas las métricas disponibles (para debugging)
          echo "Métricas disponibles en Prometheus:"
          curl -s "$PROMETHEUS_URL/api/v1/label/__name__/values" | jq .

          # Consulta la métrica
          RESPONSE=$(curl -s -G "$PROMETHEUS_URL/api/v1/query" --data-urlencode "query=$METRIC_QUERY")
          echo "Respuesta de Prometheus:"
          echo "$RESPONSE" | jq .

      - name: Debug logs
        if: failure()
        run: |
          docker compose logs api
          docker compose logs prometheus
          echo "Configuración actual de Prometheus:"
          docker exec prometheus cat /etc/prometheus/prometheus.yml

      - name: Cleanup
        if: always()
        run: docker compose down